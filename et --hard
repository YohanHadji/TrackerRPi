[1mdiff --git a/__pycache__/detection.cpython-311.pyc b/__pycache__/detection.cpython-311.pyc[m
[1mindex dc21d88..4709ead 100644[m
Binary files a/__pycache__/detection.cpython-311.pyc and b/__pycache__/detection.cpython-311.pyc differ
[1mdiff --git a/app.log b/app.log[m
[1mindex 693d96c..7164884 100755[m
[1m--- a/app.log[m
[1m+++ b/app.log[m
[36m@@ -6870,3 +6870,31 @@[m [mTraceback (most recent call last):[m
 TypeError: The view function for 'send_focus' did not return a valid response. The function either returned None or ended without a return statement.[m
 Error in send_focus: argument out of range[m
 Error in send_focus: argument out of range[m
[32m+[m[32mException on /send_udp [POST][m
[32m+[m[32mTraceback (most recent call last):[m
[32m+[m[32m  File "/usr/lib/python3/dist-packages/flask/app.py", line 2525, in wsgi_app[m
[32m+[m[32m    response = self.full_dispatch_request()[m
[32m+[m[32m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^[m
[32m+[m[32m  File "/usr/lib/python3/dist-packages/flask/app.py", line 1823, in full_dispatch_request[m
[32m+[m[32m    return self.finalize_request(rv)[m
[32m+[m[32m           ^^^^^^^^^^^^^^^^^^^^^^^^^[m
[32m+[m[32m  File "/usr/lib/python3/dist-packages/flask/app.py", line 1842, in finalize_request[m
[32m+[m[32m    response = self.make_response(rv)[m
[32m+[m[32m               ^^^^^^^^^^^^^^^^^^^^^^[m
[32m+[m[32m  File "/usr/lib/python3/dist-packages/flask/app.py", line 2134, in make_response[m
[32m+[m[32m    raise TypeError([m
[32m+[m[32mTypeError: The view function for 'send_udp' did not return a valid response. The function either returned None or ended without a return statement.[m
[32m+[m[32mException on /send_udp [POST][m
[32m+[m[32mTraceback (most recent call last):[m
[32m+[m[32m  File "/usr/lib/python3/dist-packages/flask/app.py", line 2525, in wsgi_app[m
[32m+[m[32m    response = self.full_dispatch_request()[m
[32m+[m[32m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^[m
[32m+[m[32m  File "/usr/lib/python3/dist-packages/flask/app.py", line 1823, in full_dispatch_request[m
[32m+[m[32m    return self.finalize_request(rv)[m
[32m+[m[32m           ^^^^^^^^^^^^^^^^^^^^^^^^^[m
[32m+[m[32m  File "/usr/lib/python3/dist-packages/flask/app.py", line 1842, in finalize_request[m
[32m+[m[32m    response = self.make_response(rv)[m
[32m+[m[32m               ^^^^^^^^^^^^^^^^^^^^^^[m
[32m+[m[32m  File "/usr/lib/python3/dist-packages/flask/app.py", line 2134, in make_response[m
[32m+[m[32m    raise TypeError([m
[32m+[m[32mTypeError: The view function for 'send_udp' did not return a valid response. The function either returned None or ended without a return statement.[m
[1mdiff --git a/detection.py b/detection.py[m
[1mindex bf24800..0faf35b 100644[m
[1m--- a/detection.py[m
[1m+++ b/detection.py[m
[36m@@ -47,7 +47,7 @@[m [mdef obtain_top_contours(b_frame, n=10):[m
         if M['m00'] != 0:[m
             cx, cy = int(M['m10'] / M['m00']), int(M['m01'] / M['m00'])[m
             contour_radius = cv2.minEnclosingCircle(blob)[1][m
[31m-            if contour_radius > 5:[m
[32m+[m[32m            if contour_radius > 1:[m
                 contour_brightness.append(((cx, cy), cv2.contourArea(blob)))[m
 [m
     # Sort contours based on brightness[m
[36m@@ -188,18 +188,26 @@[m [mdef detect(frame, sensorTimeStamp):[m
 [m
 def getLockedPoint(all_light_points, resolution, isButtonPressed=False,swLeft=False,swRight=False,swUp=False,swDown=False):[m
     global currentlyLocked, lockedName, lockRadius[m
[32m+[m[41m    [m
[32m+[m[32m    atLeastOnePointInRadius = False[m
 [m
     if (not currentlyLocked):[m
         for i, (name, firstSeen, x, y, _, _, _, _, _, _) in enumerate(all_light_points):[m
             if (abs(x - resolution[0]/2) <= lockRadius and abs(y - resolution[1]/2) <= lockRadius):[m
                 lockedName = name[m
                 currentlyLocked = True[m
[32m+[m[32m                atLeastOnePointInRadius = True[m
                 break[m
     else: [m
         if (not lockedName in [name for name, firstSeen, _, _, _, _, _, _, _, _ in all_light_points]):[m
             currentlyLocked = False[m
             lockedName = "ABCD"[m
[32m+[m[32m        else:[m
[32m+[m[32m            atLeastOnePointInRadius = True[m
 [m
[32m+[m[32m    if (not atLeastOnePointInRadius):[m
[32m+[m[32m        currentlyLocked = False[m
[32m+[m[32m        lockedName = "ABCD"[m
 [m
     if (isButtonPressed and currentlyLocked):[m
         currentlyLocked = False[m
[1mdiff --git a/newTracker.py b/newTracker.py[m
[1mindex db0809e..9e94a3d 100644[m
[1m--- a/newTracker.py[m
[1m+++ b/newTracker.py[m
[36m@@ -275,16 +275,16 @@[m [mdef tracking_loop():[m
             pointToSend.age = np.int32((((time.time()-startTime)*1e9)-(sensorTimeStamp+timeOffsetAverage))/1e6)[m
             # print(pointToSend.age)[m
             # oldX = pointToSend.x[m
[31m-            # pointToSend.x = pointToSend.x+15[m
[31m-            # pointToSend.y = pointToSend.y-13[m
[32m+[m[32m            pointToSend.x = pointToSend.x-27[m
[32m+[m[32m            pointToSend.y = pointToSend.y-5[m
             [m
                         [m
[31m-            pointToSend.x = pointToSend.x + 35[m
[31m-            pointToSend.y = pointToSend.y + 33[m
[32m+[m[32m            pointToSend.x = pointToSend.x[m
[32m+[m[32m            pointToSend.y = pointToSend.y[m[41m [m
 [m
             print(pointToSend.name, pointToSend.x, pointToSend.y, pointToSend.age, pointToSend.isVisible)[m
 [m
[31m-            sendTargetToTeensy(pointToSend, 33, 7, 100)[m
[32m+[m[32m            sendTargetToTeensy(pointToSend, 33, 15, 50)[m
 [m
             printFps()[m
 [m
